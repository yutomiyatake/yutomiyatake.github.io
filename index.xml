<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Yuto Miyatake</title>
    <link>https://yutomiyatake.github.io/index.xml</link>
      <atom:link href="https://yutomiyatake.github.io/index.xml" rel="self" type="application/rss+xml" />
    <description>Yuto Miyatake</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Thu, 03 Feb 2022 17:18:22 +0900</lastBuildDate>
    <item>
      <title>関数の定義：キーワード引数</title>
      <link>https://yutomiyatake.github.io/post/julia_kwargs/</link>
      <pubDate>Thu, 03 Feb 2022 17:18:22 +0900</pubDate>
      <guid>https://yutomiyatake.github.io/post/julia_kwargs/</guid>
      <description>&lt;p&gt;関数を定義する際，キーワード引数を利用すると便利なことがあります．例えば反復法の終了条件として閾値（例えば最大反復回数や許容誤差）を設定することはよくありますが，デフォルトの値を設定しつつも，関数を呼び出すときに自由に変更できると便利です．キーワード引数は，引数の指定を位置ではなく名前でおこないます．以下，Jiliaにおけるキーワード引数の基本的な使い方を説明します．&lt;/p&gt;
&lt;p&gt;例えば，次の関数では &lt;code&gt;y&lt;/code&gt; の値としてデフォルトで &lt;code&gt;1&lt;/code&gt; が設定されていますが，関数を呼び出すときに，自由に変更することが可能です．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;julia&amp;gt; function f(x;y=1)
       return x+y
       end
f (generic function with 1 method)
    
julia&amp;gt; f(2)
3
    
julia&amp;gt; f(2,y=0.1)
2.1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;もちろん，型を指定することもできます．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;julia&amp;gt; function g(x;y::Int64=1)
       return x+y
       end
g (generic function with 1 method)
    
julia&amp;gt; g(2,y=1)
3
    
julia&amp;gt; g(2,y=0.1)
ERROR: TypeError: in keyword argument y, expected Int64, got Float64
Stacktrace:
 [1] (::getfield(Main, Symbol(&amp;quot;#kw##g&amp;quot;)))(::NamedTuple{(:y,),Tuple{Float64}}, ::typeof(g), ::Int64) at ./none:0
 [2] top-level scope at REPL[15]:1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Int64&lt;/code&gt; は 64-bit signed integer type なので，このように小数を代入をしようとするとエラーが起きます．&lt;/p&gt;
&lt;p&gt;また，キーワード引数が二つ以上ある場合，どの順番で指定しても問題ありません．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;julia&amp;gt; function h(x;y=1,z=2)
       return x*y+z
       end
h (generic function with 1 method)

julia&amp;gt; h(1,z=3)
4

julia&amp;gt; h(1,z=3,y=2)
5
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Juliaの行列ベクトル積について（疎行列編）</title>
      <link>https://yutomiyatake.github.io/post/julia_mat_vec/</link>
      <pubDate>Wed, 02 Feb 2022 09:13:33 +0900</pubDate>
      <guid>https://yutomiyatake.github.io/post/julia_mat_vec/</guid>
      <description>&lt;p&gt;科学技術計算では行列ベクトル積が頻繁に登場し，これを効率よく計算することはとても重要です．
行列サイズ $n$ に対して計算量は $\mathrm{O}(n^2)$ ですが，行列は疎行列（ほとんどの要素が $0$）であることが多く，定義通りに計算すると $0$ を掛けたり足したりする無駄な演算が多く発生してしまいます．
以下では疎行列とベクトルの積の計算について解説します．
（もっとも，Juliaで行列ベクトル積 $A\boldsymbol{b}$ を計算するには &lt;code&gt;A*b&lt;/code&gt; と書けばよく，これは $A$ が疎行列の場合でも同様なので，疎行列のパッケージがあることさえ知っていれば実用上は十分なことが多いのですが，とはいえ，チューニングを行ったり，上三角部分など行列の一部とベクトルの積を計算したりしたいときには，疎行列とベクトルの積がどのように計算されているか理解しておくことが重要です．）&lt;/p&gt;
&lt;p&gt;まず，行列 $A$ を適当に定義して，疎行列に変換してみましょう．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;julia&amp;gt; using SparseArrays

julia&amp;gt; A = [1 2 5; 0 3 0; 0 4 6]
3×3 Array{Int64,2}:
 1  2  5
 0  3  0
 0  4  6

julia&amp;gt; A = sparse(A)
3×3 SparseMatrixCSC{Int64,Int64} with 6 stored entries:
  [1, 1]  =  1
  [1, 2]  =  2
  [2, 2]  =  3
  [3, 2]  =  4
  [1, 3]  =  5
  [3, 3]  =  6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.julialang.org/en/v1/stdlib/SparseArrays/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;マニュアル&lt;/a&gt;によれば，圧縮列格納方式 (CSC) が採用されています．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;struct SparseMatrixCSC{Tv,Ti&amp;lt;:Integer} &amp;lt;: AbstractSparseMatrix{Tv,Ti}
    m::Int                  # Number of rows
    n::Int                  # Number of columns
    colptr::Vector{Ti}      # Column i is in colptr[i]:(colptr[i+1]-1)
    rowval::Vector{Ti}      # Row indices of stored values
    nzval::Vector{Tv}       # Stored values, typically nonzeros
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上で定義した行列に対しては，それぞれ以下のようになっています．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;julia&amp;gt; A.m
3

julia&amp;gt; A.n
3

julia&amp;gt; A.colptr
4-element Array{Int64,1}:
 1
 2
 5
 7

julia&amp;gt; A.rowval
6-element Array{Int64,1}:
 1
 1
 2
 3
 1
 3

julia&amp;gt; A.nzval
6-element Array{Int64,1}:
 1
 2
 3
 4
 5
 6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;さて，行列ベクトル積 $y=Ax$ を計算するためには，定義の通り，&lt;/p&gt;
&lt;p&gt;$$y_i = \sum_{j=1}^nA_{ij}x_j$$&lt;/p&gt;
&lt;p&gt;をfor文で実装するのが自然ですが，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;疎行列の場合，$0$にアクセスするのは無駄&lt;/li&gt;
&lt;li&gt;行列の要素は行ではなく列を基準に格納されている&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ため，少し工夫する必要があります．例えば，次のように書くのがよいでしょう．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;x = ones(A.n);
y = zeros(A.n);
for col = 1 : A.n

  idx = A.colptr[col]

  for i = idx : (A.colptr[col + 1] - 1)
    y[A.rowval[i]] += A.nzval[i] * x[col]
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3重対角行列でテストしてみます．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;using SparseArrays
using LinearAlgebra #Tridiagonalを使うために必要

function main()

function matvec(A,x)
    y = zeros(A.n);
    for col = 1 : A.n

        idx = A.colptr[col]

        for i = idx : (A.colptr[col + 1] - 1)
            y[A.rowval[i]] += A.nzval[i] * x[col]
        end
    end
    return y
end
n = 400000; #行列サイズ
A = Tridiagonal(ones(n-1),-2ones(n),ones(n-1)); #三重対角行列
A = sparse(A); #疎行列に
# あるいは最初から
# A = spdiagm(1=&amp;gt;ones(n-1),0=&amp;gt;-2*ones(n),-1=&amp;gt;ones(n-1))
x = ones(n);
@time matvec(A,x); #時間測定

end

main()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;計算時間は行列サイズ $n$ にほぼ比例するはずです（行列サイズが2倍になれば計算時間も約2倍）．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Matlabで描く図の背景の透明化</title>
      <link>https://yutomiyatake.github.io/post/matlab-transparency/</link>
      <pubDate>Tue, 01 Feb 2022 23:04:32 +0900</pubDate>
      <guid>https://yutomiyatake.github.io/post/matlab-transparency/</guid>
      <description>&lt;p&gt;Matlabで図を描いたとき，通常，図の背景は白です．論文を書くときなどはこれで困らないのですが，スライドに貼り付けると，背景が「真っ白」ではない場合，少し微妙な出来栄えになってしまいます．&lt;/p&gt;
&lt;p&gt;そんなとき，背景が透明な図を描ければよいのですが，matlabの場合は次のように実現可能です．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;set(gcf, &#39;Color&#39;, &#39;none&#39;); % figureの背景を透明に設定
set(gca, &#39;Color&#39;, &#39;none&#39;); % axisの背景を透明に設定
set(gcf, &#39;InvertHardCopy&#39;, &#39;off&#39;); % figureの背景を白でコピーする設定を外す
saveas(gcf, &#39;test.pdf&#39;);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>PDFの余白を小さくする</title>
      <link>https://yutomiyatake.github.io/post/pdfcrop/</link>
      <pubDate>Tue, 01 Feb 2022 10:53:04 +0900</pubDate>
      <guid>https://yutomiyatake.github.io/post/pdfcrop/</guid>
      <description>&lt;p&gt;Matlabなどで図を描き，PDFで保存すると，想定外に余白が大きすぎることがあり，TeXで貼り付けるときに少々困ります．そんなときは，ターミナルから&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pdfcrop test.pdf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;とすれば余白は最小化されます．なお，TeXをTeX Liveでインストールしていればpdfcropは標準でインストールされているはずです．&lt;/p&gt;
&lt;p&gt;（以下は何年も前の情報で，ここ数年，次のようなトラブルには遭遇していませんが，以前のwebページに載せていた情報をそのまま掲載します）&lt;/p&gt;
&lt;p&gt;このpdfcropですが，ghostscript関係でエラーが起こることがあります．これは，TeXのインストール時に同時にインストールされるghostscriptとは別にhomebrewなどでghostscriptをインストールした場合に発生するようです．そんなときはターミナルから&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew link --overwrite ghostscript
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;とすれば解決するようです．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JuliaでLU分解するときの注意点</title>
      <link>https://yutomiyatake.github.io/post/lu-julia/</link>
      <pubDate>Mon, 03 Jan 2022 16:28:58 +0900</pubDate>
      <guid>https://yutomiyatake.github.io/post/lu-julia/</guid>
      <description>&lt;p&gt;JuliaでLU分解を利用して連立一次方程式を数値計算するとき，枢軸選択 (pivoting) に注意する必要があります．みるべき情報は&lt;a href=&#34;https://docs.julialang.org/en/v1/stdlib/LinearAlgebra/#LinearAlgebra.lu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ここ&lt;/a&gt;ですが，備忘録も兼ねてまとめておきます．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;julia&amp;gt; using LinearAlgebra

julia&amp;gt; A = [0 0 2; 1 0 1 ; 2 -1 1]
3×3 Array{Int64,2}:
 0   0  2
 1   0  1
 2  -1  1

julia&amp;gt; L, U = lu(A) # 素直にLU分解
LU{Float64,Array{Float64,2}}
L factor:
3×3 Array{Float64,2}:
 1.0  0.0  0.0
 0.5  1.0  0.0
 0.0  0.0  1.0
U factor:
3×3 Array{Float64,2}:
 2.0  -1.0  1.0
 0.0   0.5  0.5
 0.0   0.0  2.0

julia&amp;gt; L*U
3×3 Array{Float64,2}:
 2.0  -1.0  1.0
 1.0   0.0  1.0
 0.0   0.0  2.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;L*U&lt;/code&gt;が&lt;code&gt;A&lt;/code&gt;と一致しません．そもそも&lt;code&gt;A&lt;/code&gt;の (1,1) 成分が 0 ですから，通常のLU分解は初手から破綻してしまいます．では何が行われているかというと枢軸選択 (pivoting) が行われているわけです．要するに行の入れ替えが行われています．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;julia&amp;gt; L, U, p = lu(A)
LU{Float64,Array{Float64,2}}
L factor:
3×3 Array{Float64,2}:
 1.0  0.0  0.0
 0.5  1.0  0.0
 0.0  0.0  1.0
U factor:
3×3 Array{Float64,2}:
 2.0  -1.0  1.0
 0.0   0.5  0.5
 0.0   0.0  2.0

julia&amp;gt; p # 置換を表すベクトル
3-element Array{Int64,1}:
 3
 2
 1

julia&amp;gt; b = [4;3;5] # 連立一次方程式の右辺ベクトル
3-element Array{Int64,1}:
 4
 3
 5

julia&amp;gt; A\b #　連立一次方程式の解
3-element Array{Float64,1}:
  1.0
 -1.0
  2.0

julia&amp;gt; x1 = U\(L\b) # pivotingを無視して計算すると...
3-element Array{Float64,1}:
  0.5
 -0.5
  2.5

julia&amp;gt; x2 = U\(L\b[p]) # pivotingを考慮して計算するにはこのようにすればよい
3-element Array{Float64,1}:
  1.0
 -1.0
  2.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;置換を表す行列も簡単に取り出せます．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;julia&amp;gt; F = lu(A);

julia&amp;gt; F.P
3×3 Array{Float64,2}:
 0.0  0.0  1.0
 0.0  1.0  0.0
 1.0  0.0  0.0

julia&amp;gt; (F.P)*A - L*U
3×3 Array{Float64,2}:
 0.0  0.0  0.0
 0.0  0.0  0.0
 0.0  0.0  0.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;なお，枢軸選択を無視してLU分解することも可能です．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;julia&amp;gt; lu(A,Val(false)) # A は上の3x3行列
ERROR: ZeroPivotException: factorization encountered one or more zero pivots. Consider switching to a pivoted LU factorization.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;怒られます．(1,1) 成分が 0 なのですから当然です．しかし，枢軸選択を無視してもLU分解が動く例もあります．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;julia&amp;gt; A = [1 1; 2 1] # この行列に対して
2×2 Array{Int64,2}:
 1  1
 2  1

julia&amp;gt; L,U　= lu(A) #　LU分解すると
LU{Float64,Array{Float64,2}}
L factor:
2×2 Array{Float64,2}:
 1.0  0.0
 0.5  1.0
U factor:
2×2 Array{Float64,2}:
 2.0  1.0
 0.0  0.5

julia&amp;gt; L*U # 枢軸選択が適用されますが
2×2 Array{Float64,2}:
 2.0  1.0
 1.0  1.0

julia&amp;gt; L,U = lu(A,Val(false)) # このようにすれば，枢軸選択は適用されません
LU{Float64,Array{Float64,2}}
L factor:
2×2 Array{Float64,2}:
 1.0  0.0
 2.0  1.0
U factor:
2×2 Array{Float64,2}:
 1.0   1.0
 0.0  -1.0

julia&amp;gt; L*U # 実際に L*U が A に一致します
2×2 Array{Float64,2}:
 1.0  1.0
 2.0  1.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;あえて枢軸選択を行わないメリットはあまりないとは思いますが，例えば，matlabの素朴なLU分解と比較するときなどには &lt;code&gt;lu(A,Val(false))&lt;/code&gt; は役立つかもしれません．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ウェブページをリニューアルしました</title>
      <link>https://yutomiyatake.github.io/post/initial/</link>
      <pubDate>Mon, 03 Jan 2022 16:18:13 +0900</pubDate>
      <guid>https://yutomiyatake.github.io/post/initial/</guid>
      <description>&lt;p&gt;2019年頃から個人のウェブページをMkDocsで作ってきましたが，Hugoを使ってリニューアルしました．MkDocsも十分使い勝手がよく，おそらくこれからも講義用のページはMkDocsで構成していく予定ですが，備忘録（メモ）をブログ形式で残したいと思い（日付を残したいのと，タグ付け機能を使いたいのが主な動機です），HugoのAcademicテーマを利用することにしました．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://yutomiyatake.github.io/admin/config.yml</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yutomiyatake.github.io/admin/config.yml</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
